<!DOCTYPE html>

<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <!-- font-awesome plugin -->
    <script
      src="https://kit.fontawesome.com/27ab7d05ba.js"
      crossorigin="anonymous"
    ></script>

    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <style>
        #id1{
            border-radius:  15px 50px 30px;
            border: 2px solid #73AD21;
            padding: 20px; 
            margin:30px;
          }
    </style>
    <!-- My CSS -->
    <link rel="stylesheet" type="text/css" href="CSS/home.css" />

    <title>üë®‚Äçüéì Study Today</title>
  </head>

  <body>
    <div class="container-fluid">
      <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container-fluid">
          <a class="navbar-brand" href="#">
            <img
              src="Images/logo.png"
              alt=""
              width="30"
              height="30"
              class="d-inline-block align-text-top"
            />
            Studytoday
          </a>
          <button
            class="navbar-toggler"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent"
            aria-expanded="false"
            aria-label="Toggle navigation"
          >
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ms-5 me-auto mb-2 mb-lg-0">
              <li class="nav-item">
                <a class="nav-link mx-5" aria-current="page" href="home"
                  >Home</a
                >
              </li>
              <li class="nav-item">
                <a class="nav-link mx-5" href="academics">Academics</a>
              </li>
              <li class="nav-item">
                <a class="nav-link active mx-5" href="#">Interview preparation</a>
              </li>
              <li class="nav-item">
                <a class="nav-link mx-5" href="team">Team</a>
              </li>
            </ul>
            <form action="/logout" method="POST" class="d-flex">   
              <button class="btn btn-outline-primary ms-5" type="submit">
                Logout
              </button>
            </form>
          </div>
        </div>
      </nav>
    </div>    
    <hr>
    <div>
        <nav class="navbar navbar-expand-lg navbar-light">
            <div class="container-fluid">
              <button
                class="navbar-toggler"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent"
                aria-expanded="false"
                aria-label="Toggle navigation"
              >
                <span class="navbar-toggler-icon"></span>
              </button>
              <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ms-5 me-auto mb-2 mb-lg-0">
                  <li class="nav-item">
                    <a class="nav-link mx-5"  href="dbms"
                      >DBMS</a
                    >
                  </li>
                  <li class="nav-item">
                    <a class="nav-link mx-5" aria-current="page" href="os">OS</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link  mx-5" href="CN">CN</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link active mx-5" href="oops">OOPS</a>
                  </li>
                </ul>
                </form>
              </div>
            </div>
          </nav>
    </div> 
    <hr>
    <div>
        <div class="onlycontentinner">  
          <div id="id1">
            <table>
            <tr><td>
            <h1 class="h1">OOPs Interview Questions</h1>
            <p><strong>Object-oriented programming</strong> (OOPs) is a programming paradigm that is based on the concept of objects rather than just functions and procedures. It is the most popular methodology among developers.</p>
            <p>Nowadays tech giants demanding and hiring who has expertise in <strong>object-oriented</strong> approaches and patterns and conducting interviews for the same. The advantage of hiring such candidates is that they can also learn other OOP languages easily as per organization requirements. Since, going through the section, you can increase your chance to get hire by companies if you have well prepared for <strong>OOPs interview questions</strong>.</p>
            <p>In this section, we have collected some commonly asked <strong>OOPs interview questions</strong> for both fresher and experienced. It can help you to crack the interview to get your dream job.</p>
            <img src="https://static.javatpoint.com/interview/images/oops-interview-questions.png" alt="OOPs Interview Questions" />
            <h3 class="h3">1) What do you understand by OOP?</h3>
            <p>OOP stands for object-oriented programming. It is a programming paradigm that revolves around the object rather than function and procedure. In other words, it is an approach for developing applications that emphasize on objects. An object is a real word entity that contains data and code. It allows binding data and code together.</p>
            <hr />
            <h3 class="h3">2) Name any seven widely used OOP languages.</h3>
            <p>There are various OOP languages but the most widely used are:</p>
            <ul class="points">
            <li>Python</li>
            <li>Java</li>
            <li>Go</li>
            <li>Dart</li>
            <li>C++</li>
            <li>C#</li>
            <li>Ruby</li>
            </ul>
            <hr />
            <h3 class="h3">3) What is the purpose of using OOPs concepts?</h3>
            <p>The aim of OOP is to implement real-world entities like inheritance, hiding, polymorphism in programming. The main purpose of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.</p>
            <hr />
            <h3 class="h3">4) What are the four main features of OOPs?</h3>
            <p>The OOP has the following four features:</p>
            <ul class="points">
            <li>Inheritance</li>
            <li>Encapsulation</li>
            <li>Polymorphism</li>
            <li>Data Abstraction</li>
            </ul>
            <img src="https://static.javatpoint.com/interview/images/oops-interview-questions-q4.png" alt="OOPs Interview Questions" />
            <hr />
            <h3 class="h3">5) Why OOP is so popular?</h3>
            <p>OOPs, programming paradigm is considered as a better style of programming. Not only it helps in writing a complex piece of code easily, but it also allows users to handle and maintain them easily as well. Not only that, the main pillar of OOPs - Data Abstraction, Encapsulation, Inheritance, and Polymorphism, makes it easy for programmers to solve complex scenarios. As a result of these, OOPs is so popular.</p>
            <hr />
            <h3 class="h3">6) What are the advantages and disadvantages of OOP?</h3>
            <p><strong>Advantages of OOP</strong></p>
            <ul class="points">
            <li>It follows a bottom-up approach.</li>
            <li>It models the real word well.</li>
            <li>It allows us the reusability of code.</li>
            <li>Avoids unnecessary data exposure to the user by using the abstraction.</li>
            <li>OOP forces the designers to have a long and extensive design phase that results in better design and fewer flaws.</li>
            <li>Decompose a complex problem into smaller chunks.</li>
            <li>Programmer are able to reach their goals faster.</li>
            <li>Minimizes the complexity.</li>
            <li>Easy redesign and extension of code that does not affect the other functionality.</li>
            </ul>
            <p><strong>Disadvantages of OOP</strong></p>
            <ul class="points">
            <li>Proper planning is required.</li>
            <li>Program design is tricky.</li>
            <li>Programmer should be well skilled.</li>
            <li>Classes tend to be overly generalized.</li>
            </ul>
            <hr />
            <h3 class="h3">7) What are the limitations of OOPs?</h3>
            <ul class="points">
            <li>Requires intensive testing processes.</li>
            <li>Solving problems takes more time as compared to Procedure Oriented Programming.</li>
            <li>The size of the programs created using this approach may become larger than the programs written using the procedure-oriented programming approach.</li>
            <li>Software developed using this approach requires a substantial amount of pre-work and planning.</li>
            <li>OOP code is difficult to understand if you do not have the corresponding class documentation.</li>
            <li>In certain scenarios, these programs can consume a large amount of memory.</li>
            <li>Not suitable for small problems.</li>
            <li>Takes more time to solve problems.</li>
            </ul>
            <hr />
            <h3 class="h3">8) What are the differences between object-oriented programming and structural programming?</h3>
            <table class="alt">
            <tr>
            <th>Object-oriented Programming</th>
            <th>Structural Programming</th>
            </tr>
            <tr>
            <td>It follows a bottom-up approach.</td>
            <td>It follows a top-down approach.</td>
            </tr>
            <tr>
            <td>It provides data hiding.</td>
            <td>Data hiding is not allowed.</td>
            </tr>
            <tr>
            <td>It is used to solve complex problems.</td>
            <td>It is used to solve moderate problems.</td>
            </tr>
            <tr>
            <td>It allows reusability of code that reduces redundancy of code.</td>
            <td>Reusability of code is not allowed.</td>
            </tr>
            <tr>
            <td>It is based on objects rather than functions and procedures.</td>
            <td>It provides a logical structure to a program in which the program is divided into functions.</td>
            </tr>
            <tr>
            <td>It provides more security as it has a data hiding feature.</td>
            <td>It provides less security as it does not support the data hiding feature.</td>
            </tr>
            <tr>
            <td>More abstraction more flexibility.</td>
            <td>Less abstraction less flexibility.</td>
            </tr>
            <tr>
            <td>It focuses on data.</td>
            <td>It focuses on the process or logical structure.</td>
            </tr>
            </table>
            <hr />
            <h3 class="h3">9) What do you understand by pure object-oriented language? Why Java is not a pure object-oriented programming language?</h3>
            <p>The programming language is called pure object-oriented language that treats everything inside the program as an object. The primitive types are not supported by the pure OOPs language. There are some other features that must satisfy by a pure object-oriented language:</p>
            <ul class="points">
            <li>Encapsulation</li>
            <li>Inheritance</li>
            <li>Polymorphism</li>
            <li>Abstraction</li>
            <li>All predefined types are objects</li>
            <li>All user-defined types are objects</li>
            <li>All operations performed on objects must be only through methods exposed to the objects.</li>
            </ul>
            <p><strong>Java is not a pure object-oriented programming language</strong> because pre-defined data types in Java are not treated as objects. Hence, it is not an object-oriented language.</p>
            <hr />
            <h3 class="h3">10) What do you understand by class and object? Also, give example.</h3>
            <p><strong>Class:</strong> A class is a blueprint or template of an object. It is a user-defined data type. Inside a class, we define variables, constants, member functions, and other functionality. It does not consume memory at run time. Note that classes are not considered as a data structure. It is a logical entity. It is the best example of data binding.</p>
            <p><strong>Object:</strong> An object is a real-world entity that has attributes, behavior, and properties. It is referred to as an instance of the class. It contains member functions, variables that we have defined in the class. It occupies space in the memory. Different objects have different states or attributes, and behaviors.</p>
            <p>The following figure best illustrates the class and object.</p>
            <img src="https://static.javatpoint.com/interview/images/oops-interview-questions-q10.png" alt="OOPs Interview Questions" />
            <hr />
            <h3 class="h3">11) What are the differences between class and object?</h3>
            <table class="alt">
            <tr>
            <th>Class</th>
            <th>Object</th>
            </tr>
            <tr>
            <td>It is a logical entity.</td>
            <td>It is a real-world entity.</td>
            </tr>
            <tr>
            <td>It is conceptual.</td>
            <td>It is real.</td>
            </tr>
            <tr>
            <td>It binds data and methods together into a single unit.</td>
            <td>It is just like a variable of a class.</td>
            </tr>
            <tr>
            <td>It does not occupy space in the memory.</td>
            <td>It occupies space in the memory.</td>
            </tr>
            <tr>
            <td>It is a data type that represents the blueprint of an object.</td>
            <td>It is an instance of the class.</td>
            </tr>
            <tr>
            <td>It is declared once.</td>
            <td>Multiple objects can be declared as and when required.</td>
            </tr>
            <tr>
            <td>It uses the keyword class when declared.</td>
            <td>It uses the new keyword to create an object.</td>
            </tr>
            <tr>
            <td>A class can exist without any object.</td>
            <td>Objects cannot exist without a class.</td>
            </tr>
            </table>
            <hr />
            <h3 class="h3">12) What are the key differences between class and structure?</h3>
            <table class="alt">
            <tr>
            <th>Class</th>
            <th>Structure</th>
            </tr>
            <tr>
            <td>Class is a group of common objects that shares common properties.</td>
            <td>The structure is a collection of different data types.</td>
            </tr>
            <tr>
            <td>It deals with data members and member functions.</td>
            <td>It deals with data members only.</td>
            </tr>
            <tr>
            <td>It supports inheritance.</td>
            <td>It does not support inheritance.</td>
            </tr>
            <tr>
            <td>Member variables cannot be initialized directly.</td>
            <td>Member variables can be initialized directly.</td>
            </tr>
            <tr>
            <td>It is of type reference.</td>
            <td>It is of a type value.</td>
            </tr>
            <tr>
            <td>It's members are private by default.</td>
            <td>It's members are public by default.</td>
            </tr>
            <tr>
            <td>The keyword class defines a class.</td>
            <td>The keyword struct defines a structure.</td>
            </tr>
            <tr>
            <td>An instance of a class is an object.</td>
            <td>An instance of a structure is a structure variable.</td>
            </tr>
            <tr>
            <td>Useful while dealing with the complex data structure.</td>
            <td>Useful while dealing with the small data structure.</td>
            </tr>
            </table>
            <hr />
            <h3 class="h3">13) What is the concept of access specifiers when should we use these? </h3>
            <p>In OOPs language, <strong>access specifiers</strong> are reserved keyword that is used to set the accessibility of the classes, methods and other members of the class. It is also known as <strong>access modifiers</strong>. It includes <strong>public, private,</strong> and <strong>protected</strong>. There is some other access specifier that is language-specific. Such as Java has another access specifier <strong>default</strong>. These access specifiers play a vital role in achieving one of the major functions of OOP, i.e. encapsulation. The following table depicts the accessibility.</p>
            <img src="https://static.javatpoint.com/interview/images/oops-interview-questions-q13.png" alt="OOPs Interview Questions" />
            <hr />
            <h3 class="h3">14) What are the manipulators in OOP and how it works?</h3>
            <p>Manipulators are helping functions. It is used to manipulate or modify the input or output stream. The modification is possible by using the <strong>insertion</strong> (&lt;&lt;) and <strong>extraction</strong> (&gt;&gt;) operators. Note that the modification of input or output stream does not mean to change the values of variables. There are two types of manipulators with <strong>arguments</strong> or <strong>without arguments.</strong> </p>
            <p>The example of manipulators that do not have arguments is <strong>endl, ws, flush,</strong> etc. Manipulators with arguments are <strong>setw(val), setfill(c), setbase(val), setiosflags(flag).</strong> Some other manipulators are <strong>showpos, fixed, scientific, hex, dec, oct,</strong> etc.</p>
            <hr />
            <h3 class="h3">15) What are the rules for creating a constructor?</h3>
            <ul class="points">
            <li>It cannot have a return type.</li>
            <li>It must have the same name as the Class name.</li>
            <li>It cannot be marked as static.</li>
            <li>It cannot be marked as abstract.</li>
            <li>It cannot be overridden.</li>
            <li>It cannot be final.</li>
            </ul>
            <hr />
        </div>
    </div>
    <script src="https://www.gstatic.com/dialogflow-console/fast/messenger/bootstrap.js?v=1"></script>
<df-messenger
  intent="WELCOME"
  chat-title="Study-Today"
  agent-id="fbdfa849-efb8-401b-916f-884c538e02e6"
  language-code="en"
></df-messenger>

    <!-- Bootstrap Bundle with Popper -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>

    <!-- <script src="login.js"></script> External js file -->
  </body>
</html>
